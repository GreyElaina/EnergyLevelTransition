// import com.sun.javafx.fxml.PropertyNotFoundException

plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name + "_" + project.minecraft_version
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	maven {
		url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://dl.bintray.com/ladysnake/libs'
	}
}

dependencies {
	// ELT Core
	if (project.hasProperty('EltCoreProjectPath')) {
		compile project(':EltCore')
	} else {
		println ('Missing necassary property "EltCoreProjectPath" ')
		//compile(maven repo wip)
	}

	// Annotations
	compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

	// Minecraft
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric Loader and Fabric API
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Implementation
	modImplementation("me.shedaniel:RoughlyEnoughItems:5.2.3") {exclude module: 'fabric-api'}
	modImplementation("io.github.prospector:modmenu:1.14.6+build.31") {exclude module: 'fabric-api'}

	// Used Libraries
	include(modCompile(group: 'net.devtech', name: 'arrp', version: '0.2.4')) {exclude module: 'fabric-api'}
//	include(modCompile("io.github.cottonmc:LibGui:2.2.0+1.16.1")) {exclude module: 'fabric-api'}
	include(modCompile("io.github.onyxstudios:Cardinal-Components-API:2.5.0")) {exclude module: 'fabric-api'}

}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// Force UTF-8 Encoding
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
